/*   const sceneRef = useRef<THREE.Scene | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null); */

/* // Crear escena, cámara y renderizador
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    sceneRef.current = scene;
    cameraRef.current = camera;
    rendererRef.current = renderer;

    // Cargar la textura de un corazón rojo
    const textureLoader = new THREE.TextureLoader();
    const heartTexture = textureLoader.load(
      corazon // Aquí debes poner la URL de la imagen del corazón rojo
    );

    // Crear partículas con forma de corazón
    const particleCount = 1000;
    const geometry = new THREE.BufferGeometry();
    const positions = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 10; // Posición X
      positions[i * 3 + 1] = (Math.random() - 0.5) * 10; // Posición Y
      positions[i * 3 + 2] = (Math.random() - 0.5) * 10; // Posición Z
    }

    geometry.setAttribute("position", new THREE.BufferAttribute(positions, 3));
    const material = new THREE.PointsMaterial({
      size: 0.5, // Tamaño de la partícula
      map: heartTexture, // Usar la textura de corazón
      transparent: true, // Hacer transparente para ver el corazón
      depthWrite: false, // Asegura que las partículas estén por detrás
    });

    const particles = new THREE.Points(geometry, material);
    scene.add(particles);

    // Animar las partículas
    const animate = () => {
      requestAnimationFrame(animate);
      particles.rotation.x += 0.01;
      particles.rotation.y += 0.01;
      renderer.render(scene, camera);
    };

    animate();

    // Limpieza al desmontar el componente
    return () => {
      if (rendererRef.current && rendererRef.current.domElement) {
        document.body.removeChild(rendererRef.current.domElement);
      }
    }; */